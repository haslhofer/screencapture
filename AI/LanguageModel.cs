using System;
using System.Diagnostics;
using System.IO;
using System.Data;
using System.Collections.Generic;
using System.Collections;
using System.Net.Http;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace screencapture
{
    // Root myDeserializedClass = JsonConvert.DeserializeObject<Root>(myJsonResponse); 

    public class NerRoot    
    {
        public List<List<NerResponse>> Table1 { get; set; } 
    }
    public class Root    
    {
        public List<List<ConfidenceResponse>> Table1 { get; set; } 
    }

    public class NerResponse
    {
        public int count {get;set;}
        public string label {get;set;}
        public string text {get;set;}
        
    }


    public class ConfidenceResponse
    {
        public float confidence {get;set;}
        public string hashtag {get;set;}
        
    }

    public class LanguageModel
    {

        public static List<NerResponse> GetNerFromServer()
        {
            List<NerResponse> res = new List<NerResponse>();

            var client = new HttpClient();
            var definition = new[] { new { confidence = 0.0, hashtag = "" }};
            string jsonContent = client.GetStringAsync("http://127.0.0.1:5000/ner").Result;
            NerRoot myDeserializedClass = JsonConvert.DeserializeObject<NerRoot>(jsonContent); 

            foreach (var x in myDeserializedClass.Table1)
            {
                NerResponse s = new NerResponse();
                s.text  = x[0].text;
                s.label = x[0].label;
                s.count = x[0].count;
                res.Add(s);
            }

            return res;

        }

        public static List<ConfidenceScore> GetConfidenceFromServer()
        {
            List<ConfidenceScore> res = new List<ConfidenceScore>();

            var client = new HttpClient();
            var definition = new[] { new { confidence = 0.0, hashtag = "" }};
            string jsonContent = client.GetStringAsync("http://127.0.0.1:5000/recipes").Result;
            Root myDeserializedClass = JsonConvert.DeserializeObject<Root>(jsonContent); 

            foreach (var x in myDeserializedClass.Table1)
            {
                ConfidenceScore s = new ConfidenceScore();
                s.Confidence = x[0].confidence;
                s.Hashtag = x[0].hashtag;
                res.Add(s);
            }

            return res;

        }
        public static List<ConfidenceScore> RunCmd(string cmd, string args, string workingDir)
        {
            List<ConfidenceScore> res = new List<ConfidenceScore>();
            ProcessStartInfo start = new ProcessStartInfo();
            start.FileName = @"C:\Users\gerhas\AppData\Local\Programs\Python\Python37\python.exe";
            start.Arguments = string.Format("\"{0}\" \"{1}\"", cmd, args);
            start.UseShellExecute = false;// Do not use OS shell
            start.WorkingDirectory = workingDir;
            start.CreateNoWindow = true; // We don't need new window
            start.RedirectStandardOutput = true;// Any output, generated by application will be redirected back
            start.RedirectStandardError = true; // Any error in standard output will be redirected back (for example exceptions)
            using (Process process = Process.Start(start))
            {
                using (StreamReader reader = process.StandardOutput)
                {
                    string stderr = process.StandardError.ReadToEnd(); // Here are the exceptions from our Python script
                    while (!reader.EndOfStream)
                    {
                        string tag = reader.ReadLine();
                        string confidence = reader.ReadLine();
                        ConfidenceScore s = new ConfidenceScore();
                        s.Hashtag = tag;
                        s.Confidence = float.Parse(confidence);
                        res.Add(s);
                    }
                    return res;
                }
            }
        }


        public static void UpdateHashtag(string tag, string newText)
        {
            int maxLenNewToken = 300;
            int maxLen = 1000;

            string basePath = @"C:\Users\gerhas\Documents\GitHub\hashtag\text\";
            string fullPath = basePath + tag + ".txt";

            FileStream f = new FileStream(fullPath, FileMode.OpenOrCreate, FileAccess.Read);
            StreamReader r = new StreamReader(f);
            string oldText = r.ReadToEnd();
            r.Close();
            f.Close();

            //Prepend so classifier runs on most recent text
            string fullText = (newText.Substring(0,Math.Min(newText.Length, maxLenNewToken)) + " " +  oldText);
            if (fullText.Length > maxLen) fullText = fullText.Substring(0, maxLen);

            
            f = new FileStream(fullPath, FileMode.Truncate, FileAccess.Write);
            StreamWriter w = new StreamWriter(f);
            w.Write(fullText);
            w.Flush();
            w.Close();
            f.Close();
        }
    }
}